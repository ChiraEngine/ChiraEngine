name: Build Engine
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    # nothing here

env:
  BUILD_DIR: ${{github.workspace}}/build

jobs:
  build-msvc:
    strategy:
      matrix:
        build_type: [Debug, Release]
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          spectre: true

      - name: Configure CMake
        run: cmake -G "Ninja" -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCHIRA_USE_PCH=ON

      - name: Build
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --build . --config ${{matrix.build_type}} -t ChiraEditor -- -j%NUMBER_OF_PROCESSORS%

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ChiraEngine-Windows-msvc-${{matrix.build_type}}
          path: |
            ${{env.BUILD_DIR}}/resources/
            ${{env.BUILD_DIR}}/ChiraEditor.exe
            ${{env.BUILD_DIR}}/*.dll
          retention-days: 1

      - name: Test
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --build . --config ${{matrix.build_type}} -t all -- -j%NUMBER_OF_PROCESSORS% && ctest -C ${{matrix.build_type}}

  build-mingw:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        sys: [mingw64] # [mingw64, clang64]
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          install: >-
            git
            make
          pacboy: >-
            toolchain:p
            cmake:p
            ninja:p
      - name: Configure CMake (mingw64)
        if: ${{ matrix.sys == 'mingw64' }}
        run: cmake -G "Ninja" -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCHIRA_USE_PCH=ON -DCMAKE_C_COMPILER="/mingw64/bin/gcc.exe" -DCMAKE_CXX_COMPILER="/mingw64/bin/g++.exe"

      - name: Configure CMake (clang64)
        if: ${{ matrix.sys == 'clang64' }}
        run: cmake -G "Ninja" -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCHIRA_USE_PCH=ON -DCMAKE_C_COMPILER="/mingw64/bin/clang.exe" -DCMAKE_CXX_COMPILER="/mingw64/bin/clang++.exe"

      - name: Build
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --build . --config ${{matrix.build_type}} -t ChiraEditor -- -j$(nproc)

      - name: Copy Necessary DLLs (mingw64)
        if: ${{ matrix.sys == 'mingw64' }}
        run: |
          cp /mingw64/bin/libgcc_s_seh-1.dll ${{env.BUILD_DIR}}/libgcc_s_seh-1.dll
          cp /mingw64/bin/libstdc++-6.dll    ${{env.BUILD_DIR}}/libstdc++-6.dll

      - name: Copy Necessary DLLs (clang64)
        if: ${{ matrix.sys == 'clang64' }}
        run: |
          cp /clang64/bin/libc++.dll    ${{env.BUILD_DIR}}/libc++.dll
          cp /clang64/bin/libunwind.dll ${{env.BUILD_DIR}}/libunwind.dll

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ChiraEngine-Windows-mingw64-${{matrix.build_type}}
          path: |
            ${{env.BUILD_DIR}}/resources/
            ${{env.BUILD_DIR}}/ChiraEditor.exe
            ${{env.BUILD_DIR}}/*.dll
          retention-days: 1

      - name: Test
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --build . --config ${{matrix.build_type}} -t all -- -j$(nproc) && ctest -C ${{matrix.build_type}}

  build-linux:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        compiler: [gcc, clang]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Necessary Packages
        run: sudo apt update && sudo apt install -y cmake build-essential ninja-build xorg-dev mesa-common-dev mesa-utils

      - name: Install GCC
        if: ${{ matrix.compiler == 'gcc' }}
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 11
          platform: x64

      - name: Install Clang
        if: ${{ matrix.compiler == 'clang' }}
        uses: egor-tensin/setup-clang@v1
        with:
          version: 13
          platform: x64

      - name: Configure CMake
        run: cmake -G "Ninja" -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCHIRA_USE_PCH=ON

      - name: Build
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --build . --config ${{matrix.build_type}} -t ChiraEditor -- -j$(nproc)

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ChiraEngine-Linux-${{matrix.compiler}}-${{matrix.build_type}}
          path: |
            ${{env.BUILD_DIR}}/resources/
            ${{env.BUILD_DIR}}/ChiraEditor
            ${{env.BUILD_DIR}}/*.so*
          retention-days: 1

      - name: Test
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --build . --config ${{matrix.build_type}} -t all -- -j$(nproc) && ctest -C ${{matrix.build_type}}

  build-macos:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        generator: [Makefiles] # [Makefiles, Xcode]
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install LLVM from Homebrew
        run: brew install llvm

      - name: Configure CMake
        run: ${{github.workspace}}/cmake_configure_macos.sh ${{matrix.generator}}

      - name: Build
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --build . --config ${{matrix.build_type}} -t ChiraEditor -- -j$(nproc)

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ChiraEngine-macOS-${{matrix.generator}}-${{matrix.build_type}}
          path: |
            ${{env.BUILD_DIR}}/resources/
            ${{env.BUILD_DIR}}/ChiraEditor.app
            ${{env.BUILD_DIR}}/*.dylib*
          retention-days: 1

      - name: Test
        working-directory: ${{env.BUILD_DIR}}
        run: cmake --build . --config ${{matrix.build_type}} -t all -- -j$(nproc) && ctest -C ${{matrix.build_type}}
