// header funcs

    void addModelSelected();
    void convertToModelTypeSelected(const std::string& extension, const std::string& type) const;
    void convertToOBJSelected() const;
    void convertToCMDLSelected() const;
    void setLoadedFile(const std::string& meshName);
private:
    std::string loadedFile;
    std::string meshId;

// source funcs

void MainEditorPanel::convertToModelTypeSelected(const std::string& extension, const std::string& type) const {
    std::string filepath = Dialogs::saveFile(extension);
    if (filepath.empty())
        return Dialogs::popupError(TR("error.modelviewer.filename_empty"));

    if (!Engine::getWindow()->hasChild(this->meshId))
        return Dialogs::popupError(TR("error.modelviewer.no_model_present"));

    std::ofstream file{filepath, std::ios::binary};
    std::vector<byte> meshData = Engine::getWindow()->getChild<Mesh>(this->meshId)->getMeshData(type);
    file.write(reinterpret_cast<const char*>(&meshData[0]), static_cast<std::streamsize>(meshData.size()));
    file.close();
}

void MainEditorPanel::convertToOBJSelected() const {
    this->convertToModelTypeSelected(".obj", "obj");
}

void MainEditorPanel::convertToCMDLSelected() const {
    this->convertToModelTypeSelected(".cmdl", "cmdl");
}

void MainEditorPanel::setLoadedFile(const std::string& meshName) {
    if (!Resource::hasResource(meshName)) {
        Dialogs::popupError(TRF("error.modelviewer.resource_is_invalid", meshName));
        return;
    }
    if (auto* framePanel = Engine::getWindow()->getPanel<FramePanel>(engineviewID)) {
        if (framePanel->getFrame()->hasChild(this->meshId)) {
            framePanel->getFrame()->removeChild(this->meshId);
        }
        framePanel->getFrame()->addChild(new Mesh{meshName});
    }
    this->loadedFile = meshName;
}

std::string_view MainEditorPanel::getMeshId() const {
    return this->meshId;
}